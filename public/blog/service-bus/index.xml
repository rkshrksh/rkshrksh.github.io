<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service-Bus on rksh.me</title>
    <link>http://localhost:1313/blog/service-bus/</link>
    <description>Recent content in Service-Bus on rksh.me</description>
    <generator>Hugo</generator>
    <language>en-US</language>
    <copyright>Copyright © 2025, rksh.me</copyright>
    <lastBuildDate>Sat, 19 Jul 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/service-bus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>End-to-End Tracking in Azure Functions</title>
      <link>http://localhost:1313/end-to-end-tracking-in-azure-functions/</link>
      <pubDate>Sat, 19 Jul 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/end-to-end-tracking-in-azure-functions/</guid>
      <description>&lt;p&gt;In today&amp;rsquo;s cloud-native applications, services are increasingly distributed—events trigger processes, APIs invoke background jobs, and messages flow asynchronously via queues or topics.&lt;/p&gt;&#xA;&lt;p&gt;While this decoupling improves scalability, it makes &lt;strong&gt;observability&lt;/strong&gt; more challenging. When something goes wrong, how do you trace the full journey of a single user&amp;rsquo;s request across dozens of services?&lt;/p&gt;&#xA;&lt;p&gt;The answer: &lt;strong&gt;End-to-End Tracking&lt;/strong&gt; using a correlation ID or &lt;code&gt;TrackingID&lt;/code&gt;. In this blog, you’ll learn how to implement request tracking in &lt;strong&gt;Azure Functions&lt;/strong&gt; that communicate through &lt;strong&gt;Azure Service Bus&lt;/strong&gt; using the modern SDK.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
